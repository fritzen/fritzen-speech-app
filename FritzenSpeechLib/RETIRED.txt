        public static void ConvertWavStreamToMp3File(ref SpMemoryStream msx, string savetofilename)
        {
            //rewind to beginning of stream
            // msx.Seek(0, SpeechStreamSeekPositionType.SSSPTRelativeToStart);

            byte[] byteArray = (byte[])msx.GetData();

            Stream ms = new MemoryStream(byteArray);

            ms.Seek(0, SeekOrigin.Begin);

            using (var retMs = new MemoryStream())
            using (var rdr = new WaveFileReader(ms))
            using (var wtr = new LameMP3FileWriter(savetofilename, rdr.WaveFormat, LAMEPreset.VBR_90))
            {
                rdr.CopyTo(wtr);
            }
        }

		
            var notification = new System.Windows.Forms.NotifyIcon()
            {
                Visible = true,
                Icon = System.Drawing.SystemIcons.Information,
                BalloonTipText = "Ainda em execução aqui...",
            };


            using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;

using SpeechLib;
using System.Threading;
using System.Runtime.InteropServices;
using System.Diagnostics;
using System.Text.RegularExpressions;


namespace Text2Speech
{
    public partial class Form2 : Form
    {
        // some required members 
        SpVoice speech = new SpVoice();

        int speechRate = 4; // Ranges from -10 to 10 
        int volume = 100; // Range from 0 to 100.
        bool paused = false;
        public const int WM_NCLBUTTONDOWN = 0xA1;
        public const int HT_CAPTION = 0x2;


        [DllImportAttribute("user32.dll")]
        public static extern int SendMessage(IntPtr hWnd,
                         int Msg, int wParam, int lParam);
        [DllImportAttribute("user32.dll")]
        public static extern bool ReleaseCapture();


        [DllImport("user32.dll")]
        public static extern IntPtr FindWindow(String sClassName, String sAppName);

        private IntPtr thisWindow;
        private Hotkey hotkey;




        public Form2()
        {

            InitializeComponent();

            


            foreach (ISpeechObjectToken Token in speech.GetVoices(string.Empty, string.Empty))
            {
                // Populate the ComboBox Entries ..
                string desc = Token.GetDescription(49);

                int index = cmbVoices.Items.Add(Token.GetDescription(49));

                if (index == 0 || Properties.Settings.Default["Voice"].Equals(desc))
                {
                    cmbVoices.SelectedIndex = index;
                }
            }

            tbarRate.Value = speechRate;
            trbVolume.Value = volume;
        }

        private string RemoveBetween(string s, string begin, string end)
        {
            Regex regex = new Regex(string.Format("\\{0}.*?\\{1}", begin, end));
            return regex.Replace(s, string.Empty);
        }

        private void Form2_Load(object sender, EventArgs e)
        {
            thisWindow = FindWindow(null, "Blah TTS");
            hotkey = new Hotkey(thisWindow);
            hotkey.RegisterHotKeys();

            nicoStatus.ContextMenuStrip = ctxStatus;


            nicoStatus.Icon = this.Icon;
            nicoStatus.Text = "Status: Happy";


            //    this.ShowInTaskbar = false;

            //this.FormBorderStyle = FormBorderStyle.None;
            //this.TopLevel = true;
            //this.TopMost = true;
            speech.Word += speech_Word;

            //btnSpeak.FlatStyle = FlatStyle.Flat;

            btnSpeak.BackColor = Color.Transparent;




        }

        void speech_Word(int StreamNumber, object StreamPosition, int characterPosition, int length)
        {
            tbspeech.SelectionStart = characterPosition;
            tbspeech.SelectionLength = length;

            tbspeech.ScrollToCaret();
            tbspeech.Refresh();
        }

        private void DoSpeech() {
            tbspeech.Text = tbspeech.Text.Replace(System.Environment.NewLine, "");
            foreach (Process proc in Process.GetProcesses())
            {
                if (proc.MainWindowTitle.Contains("Adobe Reader"))
                {
                    SetForegroundWindow(proc.MainWindowHandle);
                    Thread.Sleep(100);
                    Application.DoEvents();
                    SendKeys.Send("^c");
                    Thread.Sleep(500);
                    Application.DoEvents();
                    IDataObject idata = Clipboard.GetDataObject();
                    Console.WriteLine(idata.ToString());
                    if (Clipboard.ContainsText())
                    {
                        string text = Clipboard.GetText(TextDataFormat.Text);
                        tbspeech.Text = text;
                    }
                    else
                    {
                        Console.WriteLine("No Text");
                    }
                }
            }

            if (paused)
            {
                speech.Resume();
                paused = false;
            }
            else
            {
                speech.Rate = speechRate;
                speech.Volume = volume;
                speech.Speak(tbspeech.Text, SpeechVoiceSpeakFlags.SVSFlagsAsync);
            }

        }

        private void btnSpeak_Click(object sender, EventArgs e)
        {
            DoSpeech();

        }
        ////

        private void btnToWAV_Click(object sender, EventArgs e)
        {
            try
            {


                SaveFileDialog sfd = new SaveFileDialog();
                sfd.Filter = "All files (*.*)|*.*|wav files (*.wav)|*.wav";
                sfd.Title = "Save to a wave file";
                sfd.FilterIndex = 2;
                sfd.RestoreDirectory = true;
                if (sfd.ShowDialog() == DialogResult.OK)
                {
                    SpeechStreamFileMode SpFileMode = SpeechStreamFileMode.SSFMCreateForWrite;
                    SpFileStream SpFileStream = new SpFileStream();
                    SpFileStream.Open(sfd.FileName, SpFileMode, false);
                    speech.AudioOutputStream = SpFileStream;
                    speech.Rate = speechRate;
                    speech.Volume = volume;
                    speech.Speak(tbspeech.Text, SpeechVoiceSpeakFlags.SVSFlagsAsync);
                    speech.WaitUntilDone(Timeout.Infinite);
                    SpFileStream.Close();
                }
            }
            catch
            {
                MessageBox.Show("There is some error in converting to Wav file.");
            }
        }

        private void cmbVoices_SelectedIndexChanged(object sender, EventArgs e)
        {
            speech.Voice = speech.GetVoices(string.Empty, string.Empty).Item(cmbVoices.SelectedIndex);

            Console.WriteLine(Properties.Settings.Default["Voice"]);

            Properties.Settings.Default["Voice"] = cmbVoices.Items[cmbVoices.SelectedIndex];
            Properties.Settings.Default.Save();

            
        }

        private void tbarRate_Scroll(object sender, EventArgs e)
        {
            speechRate = tbarRate.Value;
            speech.Rate = speechRate;
        }

        private void button1_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        private void btnPause_Click(object sender, EventArgs e)
        {
            speech.Pause();
            paused = true;
        }


        private void trbVolume_Scroll(object sender, EventArgs e)
        {
            volume = trbVolume.Value;
        }
        [DllImport("User32.dll")]
        public static extern bool SetForegroundWindow(IntPtr hWnd);



        private void Form2_MouseDown(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left)
            {
                ReleaseCapture();
                SendMessage(Handle, WM_NCLBUTTONDOWN, HT_CAPTION, 0);
            }
        }

        private void btnPlus_Click(object sender, EventArgs e)
        {
            this.Height = 420 - 42;
            btnPlus.Visible = false;
            btnMinus.Visible = true;
        }

        private void btnMinus_Click(object sender, EventArgs e)
        {
            this.Height = 70 - 42;
            btnPlus.Visible = true;
            btnMinus.Visible = false;
        }

        private void btnVoltarFrase_Click(object sender, EventArgs e)
        {

        }

        private void Form2_FormClosing(object sender, FormClosingEventArgs e)
        {
            Properties.Settings.Default["Voice"] = cmbVoices.Items[cmbVoices.SelectedIndex];

            Properties.Settings.Default.Save();
        }

        private void tbspeech_TextChanged(object sender, EventArgs e)
        {

        }

        private void button2_Click(object sender, EventArgs e)
        {
            this.WindowState = FormWindowState.Minimized;

            //this.Hide();

            //   tbspeech.Text = StripHtml1(StripHtml2(tbspeech.Text));

        }


        public static string StripHtml2(String text)
        {

            int index_1 = 0;
            int index_2 = 0;
            int len = text.Length;
            int len_strike = "</strike>".Length;

            StringBuilder msg = new StringBuilder();

            while (true)
            {
                index_1 = text.IndexOf("<strike>");
                index_2 = text.IndexOf("</strike>");


                if (index_1 < 0 || index_2 < 0)
                {
                    break;
                }
                if (index_1 > index_2)
                {

                    Console.WriteLine("ohou");
                }
                text = text.Remove(index_1, (index_2 - index_1) + len_strike);
            }
            return text;

        }

        public static string StripHtml1(String text)
        {

            int index_1 = 0;
            int index_2 = 0;
            int len = text.Length;
            int len_strike = "</a>".Length;

            StringBuilder msg = new StringBuilder();

            while (true)
            {
                index_1 = text.IndexOf("<a");
                index_2 = text.IndexOf("</a>");


                if (index_1 < 0 || index_2 < 0)
                {
                    break;
                }
                if (index_1 > index_2)
                {

                    Console.WriteLine("ohou");
                }
                text = text.Remove(index_1, (index_2 - index_1) + len_strike);
            }
            return text;

        }

        private void Form2_FormClosed(object sender, FormClosedEventArgs e)
        {
            hotkey.UnRegisterHotKeys();
        }

        protected override void WndProc(ref Message keyPressed)
        {
            if (keyPressed.Msg == 0x0312)
            {
                Console.WriteLine();
                SendKeys.SendWait("^c");
                String s = Clipboard.GetText();
                tbspeech.Text = s;
                DoSpeech();
            }
            base.WndProc(ref keyPressed);
        }

        private const int SnapDist = 50;
        private bool DoSnap(int pos, int edge)
        {
            int delta = pos - edge;
            return delta > 0 && delta <= SnapDist;
        }

        private void Form2_ResizeEnd(object sender, EventArgs e)
        {

        }

        protected override void OnResizeEnd(EventArgs e)
        {
            base.OnResizeEnd(e);
            Screen scn = Screen.FromPoint(this.Location);
            if (DoSnap(this.Left, scn.WorkingArea.Left)) this.Left = scn.WorkingArea.Left;
            if (DoSnap(this.Top, scn.WorkingArea.Top)) this.Top = scn.WorkingArea.Top;
            if (DoSnap(scn.WorkingArea.Right, this.Right)) this.Left = scn.WorkingArea.Right - this.Width;
            if (DoSnap(scn.WorkingArea.Bottom, this.Bottom)) this.Top = scn.WorkingArea.Bottom - this.Height;
        }

        private void nicoStatus_DoubleClick(object sender, EventArgs e)
        {
            this.WindowState = FormWindowState.Normal;
        }

        private void ctxExit_Click(object sender, EventArgs e)
        {
            Application.Exit();
        }
    }
     

}